let circles = [];

function setup() {
  createCanvas(800, 500);
  for (let i = 0; i < 10; i++) {
    let r = random(20, 40);
    let x = random(r, width - r);
    let y = random(r, height - r);
    circles.push(new Circle(x, y, r));
  }
}

function draw() {
  background(30);

  // Update and display each circle
  for (let c of circles) {
    c.applyGravity();
    c.update();
    c.checkEdges();
  }

  // Check collisions between circles
  for (let i = 0; i < circles.length; i++) {
    for (let j = i + 1; j < circles.length; j++) {
      circles[i].checkCollision(circles[j]);
    }
  }

  for (let c of circles) {
    c.display();
  }
}

function keyPressed() {
  if (key === ' ') {
    for (let c of circles) {
      c.applyWind();
    }
  }
}

class Circle {
  constructor(x, y, r) {
    this.pos = createVector(x, y);
    this.vel = p5.Vector.random2D().mult(random(1, 2));
    this.acc = createVector(0, 0);
    this.r = r;
    this.mass = r * 0.1;
    this.gravity = createVector(0, 0.3);
    this.wind = createVector(1, 0); // Spacebar wind force
  }

  applyForce(force) {
    let f = p5.Vector.div(force, this.mass);
    this.acc.add(f);
  }

  applyGravity() {
    this.applyForce(this.gravity);
  }

  applyWind() {
    this.applyForce(this.wind);
  }

  update() {
    this.vel.add(this.acc);
    this.pos.add(this.vel);
    this.acc.set(0, 0);
  }

  checkEdges() {
    if (this.pos.x - this.r < 0) {
      this.pos.x = this.r;
      this.vel.x *= -1;
    } else if (this.pos.x + this.r > width) {
      this.pos.x = width - this.r;
      this.vel.x *= -1;
    }

    if (this.pos.y - this.r < 0) {
      this.pos.y = this.r;
      this.vel.y *= -1;
    } else if (this.pos.y + this.r > height) {
      this.pos.y = height - this.r;
      this.vel.y *= -0.9;
      this.pos.y = height - this.r;
    }
  }

  checkCollision(other) {
    let d = dist(this.pos.x, this.pos.y, other.pos.x, other.pos.y);
    let minDist = this.r + other.r;

    if (d < minDist) {
      // Resolve overlap
      let overlap = minDist - d;
      let direction = p5.Vector.sub(this.pos, other.pos).normalize();
      this.pos.add(direction.mult(overlap / 2));
      other.pos.sub(direction.mult(overlap / 2));

      // Elastic collision response
      let normal = p5.Vector.sub(other.pos, this.pos).normalize();
      let relativeVelocity = p5.Vector.sub(this.vel, other.vel);
      let speed = relativeVelocity.dot(normal);

      if (speed < 0) return; // Prevents double-reactions

      let impulse = (2 * speed) / (this.mass + other.mass);
      this.vel.sub(p5.Vector.mult(normal, impulse * other.mass));
      other.vel.add(p5.Vector.mult(normal, impulse * this.mass));
    }
  }

  display() {
    fill(100, 200, 255);
    stroke(255);
    strokeWeight(2);
    ellipse(this.pos.x, this.pos.y, this.r * 2);
  }
}
